# webpass command: generates a password for every website

function webpass {
    #usage: webpass <website>

    website=$1
    stty -echo
    read -p "Password: " password
    echo
    stty echo

    echo "$password$website" | sha1sum - | cut -d" " -f1 | xxd -r -p | base64 | tr -d -c [:alnum:]
    echo
}

# automatically ls after cd'ing into a new directory

function cd {
    builtin cd "$@"
    if [ "$?" -eq 0 ]; then
        if [ $LINES -lt $(ls -C --width=$COLUMNS | wc -l) ]; then
            echo -e "\e[1;31mtoo many files in this directory; use ls to view"
        else
            ls --color=auto
        fi
    fi
}

function random.org {
    curl "http://www.random.org/integers/?num=1&min=""$1""&max=""$2""&col=1&base=10&format=plain&rnd=new"
}

function tree {
    if [[ $1 == '-f' ]];
        then ls -R "${@:2}" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/';
    else
        ls -R "$@" | grep ':$' | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
    fi
}

function pacsize {
     pacman -Qi $(pacman -Qq) | grep 'Name\|Size' | cut -d: -f2 | paste - - | column -t | sort -nk2
}

# usage: plays back a text-to-speech recording of the argument(s)

function say { 
	if [[ "${1}" =~ -[a-z]{2} ]]
		then local lang=${1#-} 
			local text="${*#$1}" 
		else local lang=${LANG%_*} 
			local text="$*"
	fi
 	cvlc "http://translate.google.com/translate_tts?ie=UTF-8&tl=${lang}&q=${text}" "vlc://quit" &> /dev/null 
}

# directory-specific message

function message {
    if [[ $PWD == /home/ryan/git/* ]];
        then parse_git_branch
    fi
    if [[ $PWD == /media/data0/Dropbox ]];
        then dropbox status | tr '\n' ' '
    fi
}

function parse_git_dirty {
    if [[ $(git status 2> /dev/null | tail -n1) != nothing* ]];
        then echo -n "*"
    fi
}

function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/" | tr '\n' ' '
}

function typeout {
    msg=$1
    let lnstr=$(expr length "$msg")-1
    for (( i=0; i <= $lnstr; i++ ))
    do
        echo -n "${msg:$i:1}"
        sleep .1
    done
    echo
}

function until-success {
    $@ || until-success $@
}

function type-forever {
    if [ "$1" == "" ]; then
        echo "usage: type each key separated by a space, then finally an interval by which to sleep"
    else
        i=1
        while true; do    
            eval echo \${$i} # evaluates to ith argument
            i=$(( i % $# + 1 )) # cycles like 1 2 ... N 1 2 ...
            if [ "$i" == "$#" ]; then
                sleep $(eval echo \${$i})
            else
                xdotool key $(eval echo \${$i})
            fi
        done
    fi
}

function spaces-inbetween {
    for (( i=0; i<${#1}; i++ )); do
        echo -n "${1:$i:1} "
    done
    echo
}

function man {
    env LESS_TERMCAP_mb=$(printf &quot;\e[1;31m&quot;) \
	LESS_TERMCAP_md=$(printf &quot;\e[1;31m&quot;) \
	LESS_TERMCAP_me=$(printf &quot;\e[0m&quot;) \
	LESS_TERMCAP_se=$(printf &quot;\e[0m&quot;) \
	LESS_TERMCAP_so=$(printf &quot;\e[1;44;33m&quot;) \
	LESS_TERMCAP_ue=$(printf &quot;\e[0m&quot;) \
	LESS_TERMCAP_us=$(printf &quot;\e[1;32m&quot;) \
	man &quot;$@&quot;
}
